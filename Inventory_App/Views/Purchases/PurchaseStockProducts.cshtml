@model Inventory_App.Models.PurchaseCartMV

@{
    ViewBag.Title = "Purchase";
}
@using (Html.BeginForm("PurchaseStockProducts", "Purchases", FormMethod.Post))
{
    @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(u => u.CompanyID)
        @Html.HiddenFor(u => u.BranchID)
        @Html.HiddenFor(u => u.UserID)
        
<div class=" row">

    <div class=" col-lg-9">
        <div class="card">
            <div class="card-header">
                <div class="card-title">New Purchase</div>


            </div>
            <div class="card-body">

                <div class="form-horizontal">

                    <div class="row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ProductID, "Product ", htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.DropDownList("ProductID", null, "Select Product", htmlAttributes: new { @class = "form-control", @onchange = "myFunction()" })
                                @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.PurchaseQuantity, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.PurchaseQuantity, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PurchaseQuantity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.PreviousPurchaseUnitPrice, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.PreviousPurchaseUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PreviousPurchaseUnitPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.CurrentPurchaseUnitPrice, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.CurrentPurchaseUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CurrentPurchaseUnitPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.SaleUnitPrice, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.SaleUnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.SaleUnitPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Manufacture, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.Manufacture, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Manufacture, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ExpiryDate, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.ExpiryDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                            <div >
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-10">
                            <input type="submit" value="Add Cart" class="btn btn-success" />
                        </div>
                    </div>
                </div>


                <hr />
                <h4>Purchase Cart</h4>
                <hr />
                <table class="table table-striped my-4 w-100" id="datatable2">
                    <thead>
                        <tr>
                            <th>
                                ProductName
                            </th>

                            <th>
                                Quantity
                            </th>
                            <th>
                                Manufacture
                            </th>
                            <th>
                                ExpiryDate
                            </th>
                            <th>
                                Previous Purchase Unit Price :
                            </th>
                            <th>
                                Current Purchase Unit Price :
                            </th>
                            <th>
                                Item Cost
                            </th>
                            <th>
                                SaleUnitPrice
                            </th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in Model.PurchaseItemsList)
                        {
                            <tr>

                                <td>
                                    @Html.DisplayFor(modelItem => item.ProductName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Quantity)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Manufacture)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ExpiryDate)
                                </td>

                                <td>
                                    @Html.DisplayFor(modelItem => item.PreviousPurchaseUnitPrice)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CurrentPurchaseUnitPrice)
                                </td>


                                <td>
                                    @( item.Quantity * item.CurrentPurchaseUnitPrice)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SaleUnitPrice)
                                </td>

                                <td>
                                    @Html.ActionLink("Delete", "DeletePurchaseCartItem", new { id = item.PurchaseCartDetailID }, new { @class = "btn btn-warning" })
                                </td>
                            </tr>
                        }

                    </tbody>

                </table>
            </div>
        </div>
    </div>

    <div class="col-lg-3">


        <div class="card b mb-2">
            <div class="card-header bb">
                <h4 class="card-title">Order Supplier</h4>
            </div>
            <div class="card-body bt">
                <h4 class="b0">Select Supplier</h4>
                    
                        @Html.DropDownList("SupplierID", null, "--Select Supplier--", htmlAttributes: new { @class = "form-control", @onchange = "SelectedSupplier()" })
                        @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                 
                
            </div>
            <table class="table">
                <tbody>
                    <tr>
                        <td>Supplier Contact</td>
                        <td>
                            <div class="text-right text-bold"><label id="suppliercontactno"></label></div>
                        </td>
                    </tr>
                    <tr>
                        <td>Supplier Address</td>
                        <td>
                            <div class="text-right text-bold"><label id="supplieraddress"></label></div>
                        </td>
                    </tr>
                   
                </tbody>
            </table>
           
        </div>



        <div class="card b mb-2">
            <div class="card-header bb">
                <h4 class="card-title">Order Summnary</h4>
            </div>
            <div class="card-body bt">
                <h4 class="b0">Order #65487</h4>
            </div>
            <table class="table">
                <tbody>
                    <tr>
                        <td>Subtotal</td>
                        <td>

                            @Html.EditorFor(model => model.OrderSummary.SubTotal, new { htmlAttributes = new { @class = "form-control", @id = "subtotal", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.OrderSummary.SubTotal, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                    <tr>
                        <td>Estimated Tax</td>
                        <td>
                            @Html.EditorFor(model => model.OrderSummary.EstimatedTax, new { htmlAttributes = new { @class = "form-control", @id = "estimatedtax", @onchange = "CalculateOrderTotal()" } })
                            @Html.ValidationMessageFor(model => model.OrderSummary.EstimatedTax, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                    <tr>
                        <td>Shiping</td>
                        <td>
                            @Html.EditorFor(model => model.OrderSummary.ShippingFee, new { htmlAttributes = new { @class = "form-control", @id = "shippingfee", @onchange = "CalculateOrderTotal()" } })
                            @Html.ValidationMessageFor(model => model.OrderSummary.ShippingFee, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                </tbody>
            </table>
            <div class="card-body">
                <div class="clearfix">
                    <div class="float-right text-right">

                        <div id="ordertotal" />
                        <div class="text-sm">BDT</div>
                    </div>
                    <div class="float-left text-bold text-dark">ORDER TOTAL</div>
                </div>
            </div>

            <div class="card-body">
                <div class="clearfix">
                    <div class="float-left text-left">
                        <input type="checkbox" id="ispaymentispaid" />  Is Order Payment is Paid?

                    </div>                  
                </div>
            </div>

            <div class="card-body">
                <p>
                    <button class="btn btn-primary btn-block" onclick = "CheckoutPurchase()" type="button">CHECKOUT</button>
                </p>
                <small class="text-muted">* To use this method you must be registered first</small>
            </div>
        </div>
    </div>
</div>
}


<script src="=~/Scripts/jquery-3.4.1.js"></script>
 <script type="text/javascript">
     $(document).ready(function () {


         var supplierID = $("#SupplierID").val();
         $.ajax({
             type: "GET",
             url: "/Supplier/GetSelectedSupplierDetails?id=" + supplierID,
             data: [],
             success: function (data) {

                 $("#suppliercontactno").text(data.ContactNo);
                 $("#supplieraddress").text(data.Address);
             }

         });


                var purchase_subtotal = document.getElementById('subtotal').value;
                var purchase_shippingfee = document.getElementById('shippingfee').value;
                var purchase_estimatedtax = document.getElementById('estimatedtax').value;
                var purchase_ordertotal = parseFloat(purchase_subtotal) + parseFloat(purchase_shippingfee) + parseFloat(purchase_estimatedtax);
                $("#ordertotal").text(purchase_ordertotal);
            });

            function myFunction() {
                var productID = $("#ProductID").val();
                $.ajax({
                    type: "GET",
                    url: "/Stock/GetSelectProductDetails?productid=" + productID,
                    data: [],
                    success: function (data) {

                        $("#SaleUnitPrice").val(data.SaleUnitPrice);
                        $("#PreviousPurchaseUnitPrice").val(data.CurrentPurchaseUnitPrice);
                    }

                });
            };


            function SelectedSupplier() {
                var supplierID = $("#SupplierID").val();
                $.ajax({
                    type: "GET",
                    url: "/Supplier/GetSelectedSupplierDetails?id=" + supplierID,
                    data: [],
                    success: function (data) {

                        $("#suppliercontactno").text(data.ContactNo);
                        $("#supplieraddress").text(data.Address);
                    }

                });
             };


     function CheckoutPurchase() {
         var supplierID = $("#SupplierID").val();
         var purchase_subtotal = document.getElementById('subtotal').value;
         var purchase_shippingfee = document.getElementById('shippingfee').value;
         var purchase_estimatedtax = document.getElementById('estimatedtax').value;
         var ispaymentpaid = $("#ispaymentispaid").is(':checked');
         $.ajax({
             type: "GET",
             url: "/Purchases/CheckoutPurchase?supplierid=" + supplierID + "&ispaymentispaid=" + ispaymentpaid + "&estimatedtax=" + purchase_estimatedtax + "&shippingfee=" + purchase_shippingfee + "&subtotal=" + purchase_subtotal ,
             data: [],
             success: function (data) {

                
             }

         });
     };


            function CalculateOrderTotal() {
                var purchase_subtotal = document.getElementById('subtotal').value;
                var purchase_shippingfee = document.getElementById('shippingfee').value;
                var purchase_estimatedtax = document.getElementById('estimatedtax').value;
                var purchase_ordertotal = parseFloat(purchase_subtotal) + parseFloat(purchase_shippingfee) + parseFloat(purchase_estimatedtax);
                $("#ordertotal").text(purchase_ordertotal);
            };

        </script>
